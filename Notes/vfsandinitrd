VFS=virtual filesystem
	-abstracts away filesystem details. 
	-implemented as a graph of notes of types like file, directory, link, device, socket, or pipe
	-commonly implements the filesystem by having the node store function pointers that the kernel calls, such as Open, close, read, writer, finding and enumerating folder's contents
	-
ex:
typedef struct fs_node
{
  char name[128];     // The filename.
  u32int flags;       // Includes the node type (Directory, file etc).
  read_type_t read;   // These typedefs are just function pointers. We'll define them later!
  write_type_t write;
  open_type_t open;
  close_type_t close;
  readdir_type_t readdir; // Returns the n'th child of a directory.
  finddir_type_t finddir; // Try to find a child in a directory by name.
} fs_node_t; 

-we need to give each node an identifier, or an inode. simply a number that uniquely represents the file. 
-symbolic links need to exist also, are simply pointers. 
-mountpoints implemented by telling the node its a mountpoint and giving it a poitner to the filesystem's root

Initial Ramdisk
	-useful for storing drivers. 
	-linux == initramfs / initrd
